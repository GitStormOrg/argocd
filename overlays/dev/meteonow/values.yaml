# Default values for MeteoNow Helm chart

replicaCount: 1  # Number of pods to run

image:
  repository: ens0c/registry        # Docker image repository
  tag: meteonow-approle2agent                  # Image tag to deploy
  pullPolicy: IfNotPresent          # Image pull policy
imagePullSecrets:
  - name: regcred  # Replace with the name of your Kubernetes secret

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true      # If true, a dedicated Kubernetes service account will be created for the pod
  name: meteonow-sa          # You can override the name here (empty = auto-generated from chart name)

service:
  type: ClusterIP   # Kubernetes service type (ClusterIP, NodePort, LoadBalancer)
  name: meteo
  port: 80          # Port exposed by the Kubernetes Service

ingress:
  enabled: true     # Enable ingress resource creation
  className: "nginx"      # Optional ingress class name (e.g. nginx)
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /                 # For basic path routing
    kubernetes.io/ingress.class: nginx                            # Specifies ingress controller
    cert-manager.io/cluster-issuer: letsencrypt-staging # For TLS with cert-manager
  hosts:
    - host: meteonow-dev.spreadit.ovh
      paths:
        - path: /            # Path exposed (prefix match)
          pathType: Prefix
  tls:
    - hosts:
        - meteonow-dev.spreadit.ovh
      secretName: meteonow-tls  # Must match a TLS secret created by cert-manager or manually

vault:
  enabled: true                          # Enable Vault Agent sidecar injection
  role: meteonow                         # Vault role associated with the application
  secretPath: secrets/data/meteonow/openweathermap  # Path in Vault where the API_KEY is stored

resources: {}  # You can define CPU/memory requests and limits here

nodeSelector: {}  # Used to schedule pods on specific nodes

tolerations: []   # Tolerate specific taints on nodes

affinity: {}      # Define pod affinity rules (e.g. co-location)
